from pprint import pprint
import copy
import os

def get_control_cases():
    ''' Return the simulation cases that are used for the case study.

        The cases are stored in this function as they are used
        for the simulation and for the post processing.
    '''

    # Default envelope and weather is LA
    cases_la = list()
    # Add the 9 control models in modelica
    cases_la.append({'model': 'BestInClass.DetailedZoning.BICBase'})
    cases_la.append({'model': 'BestInClass.DetailedZoning.BICMid'})
    cases_la.append({'model': 'BestInClass.DetailedZoning.Guideline36'})
    cases_la.append({'model': 'BestInClass.DetailedZoning.A1B1C2'})
    cases_la.append({'model': "BestInClass.DetailedZoning.A1B2C1"})
    cases_la.append({'model': 'BestInClass.DetailedZoning.A1B2C2'})
    cases_la.append({'model': 'BestInClass.DetailedZoning.A2B1C1'})
    cases_la.append({'model': 'BestInClass.DetailedZoning.A2B1C2'})
    cases_la.append({'model': 'BestInClass.DetailedZoning.A2B2C1'})

    # Cases for LA with default parameters
    for model in cases_la:
        model.update({'name': model['model'].split(".")[-1]+'_LA'})
        model.update({'start_time': 0})
        model.update({'stop_time': 365*24*3600})
        par_dict = {}
        model.update({'parameters': par_dict})

    # Cases with different weather and envelopes
    cases_sf = copy.deepcopy(cases_la)
    # Add parameters to models
    # The unit of the flowrate is kg/s
    m_flow_zone_sf = [0.075, 0.068, 0.068, 0.032, 0.504, 0.478, 0.246,
                      0.242, 0.08, 1.23, 1.159, 0.154, 0.193, 0.131,
                      0.579, 0.631, 0.631, 1.173, 0.132, 0.066, 0.068]
    m_flow_sys_sf = 5.66*1.2
    # Update model names and parameters
    for model in cases_sf:
        model['name'] = model['name'].split('_')[0]+'_SF'
        idf_sf = os.path.join('modelica://'
            'BestInClass/Resources/idf/MediumOfficeDetailed_2004_sf.idf')
        mos_sf = os.path.join('modelica://'
            'BestInClass/Resources/weather/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos')
        par_dict = model['parameters']
        par_dict['par.idfFile'] = idf_sf
        par_dict['par.weaFile'] = mos_sf
        par_dict['par.m_flow_zone'] = m_flow_zone_sf
        par_dict['par.m_flow_sys'] = m_flow_sys_sf

    cases_sac = copy.deepcopy(cases_la)
    m_flow_zone_sac = [0.077, 0.07, 0.07, 0.033, 0.431, 0.395, 0.252,
                       0.252, 0.081, 1.049, 0.942, 0.168, 0.197, 0.134,
                       0.589, 0.642, 0.685, 0.896, 0.135, 0.068, 0.07]
    m_flow_sys_sac = 5.6364*1.2
    for model in cases_sac:
        model['name'] = model['name'].split('_')[0]+'_SAC'
        idf_sac = os.path.join('modelica://'
            'BestInClass/Resources/idf/MediumOfficeDetailed_2004_sacramento.idf')
        mos_sac = os.path.join('modelica://'
            'BestInClass/Resources/weather/USA_CA_Sacramento.Metro.AP.724839_TMY3.mos')
        par_dict = model['parameters']
        par_dict['par.idfFile'] = idf_sac
        par_dict['par.weaFile'] = mos_sac
        par_dict['par.m_flow_zone'] = m_flow_zone_sac
        par_dict['par.m_flow_sys'] = m_flow_sys_sac

    cases = cases_la + cases_sf + cases_sac

    return cases

def get_load_density_cases():
    '''Return all the cases for different internal load densities.
       There are three cases: low, medium and high.
    '''

    # Default load density is high with kLig = kEqu = 1
    cases_load_high = get_control_cases()
    cases_load_medium = copy.deepcopy(cases_load_high)
    cases_load_low = copy.deepcopy(cases_load_high)

    for model in cases_load_high:
        model['name'] = model['name']+'_hLoad'

    # Create medium load density cases; the default one is high density
    for model in cases_load_medium:
        model['name'] = model['name']+'_mLoad'
        par_dict = model['parameters']
        par_dict['par.kLig'] = 0.6
        par_dict['par.kEqu'] = 0.6

    # Create low load density cases; the default one is high density
    for model in cases_load_low:
        model['name'] = model['name']+'_lLoad'
        par_dict = model['parameters']
        par_dict['par.kLig'] = 0.3
        par_dict['par.kEqu'] = 0.3

    cases = cases_load_high + cases_load_medium + cases_load_low

    return cases

def get_operation_hours_cases():
    '''Return all the cases for different operation hours.
       There are three cases: low, medium and high.
    '''

    # The default is low operation hours
    cases_operation_hours_low = get_load_density_cases()
    cases_operation_hours_medium = copy.deepcopy(cases_operation_hours_low)
    cases_operation_hours_high = copy.deepcopy(cases_operation_hours_low)

    for model in cases_operation_hours_low:
        model['name'] = model['name']+'_lHours'

    # Create cases for medium operation hours
    for model in cases_operation_hours_medium:
        model['name'] = model['name']+'_mHours'
        peo_medium = os.path.join('modelica://',
            'BestInClass/Resources/intGai/people_medium.dat')
        lig_medium = os.path.join('modelica://',
            'BestInClass/Resources/intGai/lights_medium.dat')
        equ_medium = os.path.join('modelica://',
            'BestInClass/Resources/intGai/equipment_medium.dat')
        operation_hours_medium = [31.0, 43.5, 55.0, 67.5, 79.0, 91.5, 103.0, 115.5, 151.0, 163.5, 175.0, 187.5, 199.0, 211.5, 223.0, 235.5, 247.0, 259.5, 271.0, 283.5, 319.0, 331.5, 343.0, 355.5, 367.0, 379.5, 391.0, 403.5, 415.0, 427.5, 439.0, 451.5, 511.0, 523.5, 535.0, 547.5, 559.0, 571.5, 583.0, 595.5, 607.0, 619.5, 655.0, 667.5, 679.0, 691.5, 703.0, 715.5, 727.0, 739.5, 751.0, 763.5, 775.0, 787.5, 823.0, 835.5, 847.0, 859.5, 871.0, 883.5, 895.0, 907.5, 919.0, 931.5, 943.0, 955.5, 991.0, 1003.5, 1015.0, 1027.5, 1039.0, 1051.5, 1063.0, 1075.5, 1087.0, 1099.5, 1111.0, 1123.5, 1183.0, 1195.5, 1207.0, 1219.5, 1231.0, 1243.5, 1255.0, 1267.5, 1279.0, 1291.5, 1327.0, 1339.5, 1351.0, 1363.5, 1375.0, 1387.5, 1399.0, 1411.5, 1423.0, 1435.5, 1447.0, 1459.5, 1495.0, 1507.5, 1519.0, 1531.5, 1543.0, 1555.5, 1567.0, 1579.5, 1591.0, 1603.5, 1615.0, 1627.5, 1663.0, 1675.5, 1687.0, 1699.5, 1711.0, 1723.5, 1735.0, 1747.5, 1759.0, 1771.5, 1783.0, 1795.5, 1831.0, 1843.5, 1855.0, 1867.5, 1879.0, 1891.5, 1903.0, 1915.5, 1927.0, 1939.5, 1951.0, 1963.5, 1999.0, 2011.5, 2023.0, 2035.5, 2047.0, 2059.5, 2071.0, 2083.5, 2095.0, 2107.5, 2119.0, 2131.5, 2167.0, 2179.5, 2191.0, 2203.5, 2215.0, 2227.5, 2239.0, 2251.5, 2263.0, 2275.5, 2287.0, 2299.5, 2335.0, 2347.5, 2359.0, 2371.5, 2383.0, 2395.5, 2407.0, 2419.5, 2431.0, 2443.5, 2455.0, 2467.5, 2503.0, 2515.5, 2527.0, 2539.5, 2551.0, 2563.5, 2575.0, 2587.5, 2599.0, 2611.5, 2623.0, 2635.5, 2671.0, 2683.5, 2695.0, 2707.5, 2719.0, 2731.5, 2743.0, 2755.5, 2767.0, 2779.5, 2791.0, 2803.5, 2839.0, 2851.5, 2863.0, 2875.5, 2887.0, 2899.5, 2911.0, 2923.5, 2935.0, 2947.5, 2959.0, 2971.5, 3007.0, 3019.5, 3031.0, 3043.5, 3055.0, 3067.5, 3079.0, 3091.5, 3103.0, 3115.5, 3127.0, 3139.5, 3175.0, 3187.5, 3199.0, 3211.5, 3223.0, 3235.5, 3247.0, 3259.5, 3271.0, 3283.5, 3295.0, 3307.5, 3343.0, 3355.5, 3367.0, 3379.5, 3391.0, 3403.5, 3415.0, 3427.5, 3439.0, 3451.5, 3463.0, 3475.5, 3535.0, 3547.5, 3559.0, 3571.5, 3583.0, 3595.5, 3607.0, 3619.5, 3631.0, 3643.5, 3679.0, 3691.5, 3703.0, 3715.5, 3727.0, 3739.5, 3751.0, 3763.5, 3775.0, 3787.5, 3799.0, 3811.5, 3847.0, 3859.5, 3871.0, 3883.5, 3895.0, 3907.5, 3919.0, 3931.5, 3943.0, 3955.5, 3967.0, 3979.5, 4015.0, 4027.5, 4039.0, 4051.5, 4063.0, 4075.5, 4087.0, 4099.5, 4111.0, 4123.5, 4135.0, 4147.5, 4183.0, 4195.5, 4207.0, 4219.5, 4231.0, 4243.5, 4255.0, 4267.5, 4279.0, 4291.5, 4303.0, 4315.5, 4351.0, 4363.5, 4375.0, 4387.5, 4399.0, 4411.5, 4447.0, 4459.5, 4471.0, 4483.5, 4519.0, 4531.5, 4543.0, 4555.5, 4567.0, 4579.5, 4591.0, 4603.5, 4615.0, 4627.5, 4639.0, 4651.5, 4687.0, 4699.5, 4711.0, 4723.5, 4735.0, 4747.5, 4759.0, 4771.5, 4783.0, 4795.5, 4807.0, 4819.5, 4855.0, 4867.5, 4879.0, 4891.5, 4903.0, 4915.5, 4927.0, 4939.5, 4951.0, 4963.5, 4975.0, 4987.5, 5023.0, 5035.5, 5047.0, 5059.5, 5071.0, 5083.5, 5095.0, 5107.5, 5119.0, 5131.5, 5143.0, 5155.5, 5191.0, 5203.5, 5215.0, 5227.5, 5239.0, 5251.5, 5263.0, 5275.5, 5287.0, 5299.5, 5311.0, 5323.5, 5359.0, 5371.5, 5383.0, 5395.5, 5407.0, 5419.5, 5431.0, 5443.5, 5455.0, 5467.5, 5479.0, 5491.5, 5527.0, 5539.5, 5551.0, 5563.5, 5575.0, 5587.5, 5599.0, 5611.5, 5623.0, 5635.5, 5647.0, 5659.5, 5695.0, 5707.5, 5719.0, 5731.5, 5743.0, 5755.5, 5767.0, 5779.5, 5791.0, 5803.5, 5815.0, 5827.5, 5887.0, 5899.5, 5911.0, 5923.5, 5935.0, 5947.5, 5959.0, 5971.5, 5983.0, 5995.5, 6031.0, 6043.5, 6055.0, 6067.5, 6079.0, 6091.5, 6103.0, 6115.5, 6127.0, 6139.5, 6151.0, 6163.5, 6199.0, 6211.5, 6223.0, 6235.5, 6247.0, 6259.5, 6271.0, 6283.5, 6295.0, 6307.5, 6319.0, 6331.5, 6367.0, 6379.5, 6391.0, 6403.5, 6415.0, 6427.5, 6439.0, 6451.5, 6463.0, 6475.5, 6487.0, 6499.5, 6535.0, 6547.5, 6559.0, 6571.5, 6583.0, 6595.5, 6607.0, 6619.5, 6631.0, 6643.5, 6655.0, 6667.5, 6703.0, 6715.5, 6727.0, 6739.5, 6751.0, 6763.5, 6775.0, 6787.5, 6799.0, 6811.5, 6823.0, 6835.5, 6895.0, 6907.5, 6919.0, 6931.5, 6943.0, 6955.5, 6967.0, 6979.5, 6991.0, 7003.5, 7039.0, 7051.5, 7063.0, 7075.5, 7087.0, 7099.5, 7111.0, 7123.5, 7135.0, 7147.5, 7159.0, 7171.5, 7207.0, 7219.5, 7231.0, 7243.5, 7255.0, 7267.5, 7279.0, 7291.5, 7303.0, 7315.5, 7327.0, 7339.5, 7375.0, 7387.5, 7399.0, 7411.5, 7423.0, 7435.5, 7447.0, 7459.5, 7471.0, 7483.5, 7495.0, 7507.5, 7567.0, 7579.5, 7591.0, 7603.5, 7615.0, 7627.5, 7639.0, 7651.5, 7663.0, 7675.5, 7711.0, 7723.5, 7735.0, 7747.5, 7759.0, 7771.5, 7783.0, 7795.5, 7807.0, 7819.5, 7831.0, 7843.5, 7879.0, 7891.5, 7903.0, 7915.5, 7927.0, 7939.5, 7975.0, 7987.5, 7999.0, 8011.5, 8047.0, 8059.5, 8071.0, 8083.5, 8095.0, 8107.5, 8119.0, 8131.5, 8143.0, 8155.5, 8167.0, 8179.5, 8215.0, 8227.5, 8239.0, 8251.5, 8263.0, 8275.5, 8287.0, 8299.5, 8311.0, 8323.5, 8335.0, 8347.5, 8383.0, 8395.5, 8407.0, 8419.5, 8431.0, 8443.5, 8455.0, 8467.5, 8479.0, 8491.5, 8503.0, 8515.5, 8551.0, 8563.5, 8575.0, 8587.5, 8623.0, 8635.5, 8647.0, 8659.5, 8671.0, 8683.5, 8719.0, 8731.5, 8743.0, 8755.5]
        par_dict = model['parameters']
        par_dict['par.peoFile'] = peo_medium
        par_dict['par.ligFile'] = lig_medium
        par_dict['par.equFile'] = equ_medium
        par_dict['par.occupancyTable'] = operation_hours_medium

    # Create cases for high operation hours; the default is low operation hours
    for model in cases_operation_hours_high:
        model['name'] = model['name']+'_hHours'
        peo_high = os.path.join('modelica://'
            'BestInClass/Resources/intGai/people_high.dat')
        lig_high = os.path.join('modelica://'
            'BestInClass/Resources/intGai/lights_high.dat')
        equ_high = os.path.join('modelica://'
            'BestInClass/Resources/intGai/equipment_high.dat')
        operation_hours_high = [31.0, 46.0, 55.0, 70.0, 79.0, 94.0, 103.0, 118.0, 127.0, 142.0, 151.0, 166.0, 175.0, 190.0, 199.0, 214.0, 223.0, 238.0, 247.0, 262.0, 271.0, 286.0, 295.0, 310.0, 319.0, 334.0, 343.0, 358.0, 367.0, 382.0, 391.0, 406.0, 415.0, 430.0, 439.0, 454.0, 463.0, 478.0, 511.0, 526.0, 535.0, 550.0, 559.0, 574.0, 583.0, 598.0, 607.0, 622.0, 631.0, 646.0, 655.0, 670.0, 679.0, 694.0, 703.0, 718.0, 727.0, 742.0, 751.0, 766.0, 775.0, 790.0, 799.0, 814.0, 823.0, 838.0, 847.0, 862.0, 871.0, 886.0, 895.0, 910.0, 919.0, 934.0, 943.0, 958.0, 967.0, 982.0, 991.0, 1006.0, 1015.0, 1030.0, 1039.0, 1054.0, 1063.0, 1078.0, 1087.0, 1102.0, 1111.0, 1126.0, 1135.0, 1150.0, 1183.0, 1198.0, 1207.0, 1222.0, 1231.0, 1246.0, 1255.0, 1270.0, 1279.0, 1294.0, 1303.0, 1318.0, 1327.0, 1342.0, 1351.0, 1366.0, 1375.0, 1390.0, 1399.0, 1414.0, 1423.0, 1438.0, 1447.0, 1462.0, 1471.0, 1486.0, 1495.0, 1510.0, 1519.0, 1534.0, 1543.0, 1558.0, 1567.0, 1582.0, 1591.0, 1606.0, 1615.0, 1630.0, 1639.0, 1654.0, 1663.0, 1678.0, 1687.0, 1702.0, 1711.0, 1726.0, 1735.0, 1750.0, 1759.0, 1774.0, 1783.0, 1798.0, 1807.0, 1822.0, 1831.0, 1846.0, 1855.0, 1870.0, 1879.0, 1894.0, 1903.0, 1918.0, 1927.0, 1942.0, 1951.0, 1966.0, 1975.0, 1990.0, 1999.0, 2014.0, 2023.0, 2038.0, 2047.0, 2062.0, 2071.0, 2086.0, 2095.0, 2110.0, 2119.0, 2134.0, 2143.0, 2158.0, 2167.0, 2182.0, 2191.0, 2206.0, 2215.0, 2230.0, 2239.0, 2254.0, 2263.0, 2278.0, 2287.0, 2302.0, 2311.0, 2326.0, 2335.0, 2350.0, 2359.0, 2374.0, 2383.0, 2398.0, 2407.0, 2422.0, 2431.0, 2446.0, 2455.0, 2470.0, 2479.0, 2494.0, 2503.0, 2518.0, 2527.0, 2542.0, 2551.0, 2566.0, 2575.0, 2590.0, 2599.0, 2614.0, 2623.0, 2638.0, 2647.0, 2662.0, 2671.0, 2686.0, 2695.0, 2710.0, 2719.0, 2734.0, 2743.0, 2758.0, 2767.0, 2782.0, 2791.0, 2806.0, 2815.0, 2830.0, 2839.0, 2854.0, 2863.0, 2878.0, 2887.0, 2902.0, 2911.0, 2926.0, 2935.0, 2950.0, 2959.0, 2974.0, 2983.0, 2998.0, 3007.0, 3022.0, 3031.0, 3046.0, 3055.0, 3070.0, 3079.0, 3094.0, 3103.0, 3118.0, 3127.0, 3142.0, 3151.0, 3166.0, 3175.0, 3190.0, 3199.0, 3214.0, 3223.0, 3238.0, 3247.0, 3262.0, 3271.0, 3286.0, 3295.0, 3310.0, 3319.0, 3334.0, 3343.0, 3358.0, 3367.0, 3382.0, 3391.0, 3406.0, 3415.0, 3430.0, 3439.0, 3454.0, 3463.0, 3478.0, 3487.0, 3502.0, 3535.0, 3550.0, 3559.0, 3574.0, 3583.0, 3598.0, 3607.0, 3622.0, 3631.0, 3646.0, 3655.0, 3670.0, 3679.0, 3694.0, 3703.0, 3718.0, 3727.0, 3742.0, 3751.0, 3766.0, 3775.0, 3790.0, 3799.0, 3814.0, 3823.0, 3838.0, 3847.0, 3862.0, 3871.0, 3886.0, 3895.0, 3910.0, 3919.0, 3934.0, 3943.0, 3958.0, 3967.0, 3982.0, 3991.0, 4006.0, 4015.0, 4030.0, 4039.0, 4054.0, 4063.0, 4078.0, 4087.0, 4102.0, 4111.0, 4126.0, 4135.0, 4150.0, 4159.0, 4174.0, 4183.0, 4198.0, 4207.0, 4222.0, 4231.0, 4246.0, 4255.0, 4270.0, 4279.0, 4294.0, 4303.0, 4318.0, 4327.0, 4342.0, 4351.0, 4366.0, 4375.0, 4390.0, 4399.0, 4414.0, 4447.0, 4462.0, 4471.0, 4486.0, 4495.0, 4510.0, 4519.0, 4534.0, 4543.0, 4558.0, 4567.0, 4582.0, 4591.0, 4606.0, 4615.0, 4630.0, 4639.0, 4654.0, 4663.0, 4678.0, 4687.0, 4702.0, 4711.0, 4726.0, 4735.0, 4750.0, 4759.0, 4774.0, 4783.0, 4798.0, 4807.0, 4822.0, 4831.0, 4846.0, 4855.0, 4870.0, 4879.0, 4894.0, 4903.0, 4918.0, 4927.0, 4942.0, 4951.0, 4966.0, 4975.0, 4990.0, 4999.0, 5014.0, 5023.0, 5038.0, 5047.0, 5062.0, 5071.0, 5086.0, 5095.0, 5110.0, 5119.0, 5134.0, 5143.0, 5158.0, 5167.0, 5182.0, 5191.0, 5206.0, 5215.0, 5230.0, 5239.0, 5254.0, 5263.0, 5278.0, 5287.0, 5302.0, 5311.0, 5326.0, 5335.0, 5350.0, 5359.0, 5374.0, 5383.0, 5398.0, 5407.0, 5422.0, 5431.0, 5446.0, 5455.0, 5470.0, 5479.0, 5494.0, 5503.0, 5518.0, 5527.0, 5542.0, 5551.0, 5566.0, 5575.0, 5590.0, 5599.0, 5614.0, 5623.0, 5638.0, 5647.0, 5662.0, 5671.0, 5686.0, 5695.0, 5710.0, 5719.0, 5734.0, 5743.0, 5758.0, 5767.0, 5782.0, 5791.0, 5806.0, 5815.0, 5830.0, 5839.0, 5854.0, 5887.0, 5902.0, 5911.0, 5926.0, 5935.0, 5950.0, 5959.0, 5974.0, 5983.0, 5998.0, 6007.0, 6022.0, 6031.0, 6046.0, 6055.0, 6070.0, 6079.0, 6094.0, 6103.0, 6118.0, 6127.0, 6142.0, 6151.0, 6166.0, 6175.0, 6190.0, 6199.0, 6214.0, 6223.0, 6238.0, 6247.0, 6262.0, 6271.0, 6286.0, 6295.0, 6310.0, 6319.0, 6334.0, 6343.0, 6358.0, 6367.0, 6382.0, 6391.0, 6406.0, 6415.0, 6430.0, 6439.0, 6454.0, 6463.0, 6478.0, 6487.0, 6502.0, 6511.0, 6526.0, 6535.0, 6550.0, 6559.0, 6574.0, 6583.0, 6598.0, 6607.0, 6622.0, 6631.0, 6646.0, 6655.0, 6670.0, 6679.0, 6694.0, 6703.0, 6718.0, 6727.0, 6742.0, 6751.0, 6766.0, 6775.0, 6790.0, 6799.0, 6814.0, 6823.0, 6838.0, 6847.0, 6862.0, 6895.0, 6910.0, 6919.0, 6934.0, 6943.0, 6958.0, 6967.0, 6982.0, 6991.0, 7006.0, 7015.0, 7030.0, 7039.0, 7054.0, 7063.0, 7078.0, 7087.0, 7102.0, 7111.0, 7126.0, 7135.0, 7150.0, 7159.0, 7174.0, 7183.0, 7198.0, 7207.0, 7222.0, 7231.0, 7246.0, 7255.0, 7270.0, 7279.0, 7294.0, 7303.0, 7318.0, 7327.0, 7342.0, 7351.0, 7366.0, 7375.0, 7390.0, 7399.0, 7414.0, 7423.0, 7438.0, 7447.0, 7462.0, 7471.0, 7486.0, 7495.0, 7510.0, 7519.0, 7534.0, 7567.0, 7582.0, 7591.0, 7606.0, 7615.0, 7630.0, 7639.0, 7654.0, 7663.0, 7678.0, 7687.0, 7702.0, 7711.0, 7726.0, 7735.0, 7750.0, 7759.0, 7774.0, 7783.0, 7798.0, 7807.0, 7822.0, 7831.0, 7846.0, 7855.0, 7870.0, 7879.0, 7894.0, 7903.0, 7918.0, 7927.0, 7942.0, 7975.0, 7990.0, 7999.0, 8014.0, 8023.0, 8038.0, 8047.0, 8062.0, 8071.0, 8086.0, 8095.0, 8110.0, 8119.0, 8134.0, 8143.0, 8158.0, 8167.0, 8182.0, 8191.0, 8206.0, 8215.0, 8230.0, 8239.0, 8254.0, 8263.0, 8278.0, 8287.0, 8302.0, 8311.0, 8326.0, 8335.0, 8350.0, 8359.0, 8374.0, 8383.0, 8398.0, 8407.0, 8422.0, 8431.0, 8446.0, 8455.0, 8470.0, 8479.0, 8494.0, 8503.0, 8518.0, 8527.0, 8542.0, 8551.0, 8566.0, 8575.0, 8590.0, 8623.0, 8638.0, 8647.0, 8662.0, 8671.0, 8686.0, 8695.0, 8710.0, 8719.0, 8734.0, 8743.0, 8758.0]
        par_dict = model['parameters']
        par_dict['par.peoFile'] = peo_high
        par_dict['par.ligFile'] = lig_high
        par_dict['par.equFile'] = equ_high
        par_dict['par.occupancyTable'] = operation_hours_high

    cases = cases_operation_hours_low + cases_operation_hours_medium + cases_operation_hours_high

    return cases

def get_all_cases():

    cases = get_operation_hours_cases()

    return cases

def get_case(name):
    ''' Return the case with the specified `name`
    '''

    for c in get_all_cases():
        if c['name'] == name:
            return c
    raise(ValueError('Did not find case {}'.format(name)))

def get_result_file_name(name):
    ''' Return the result file name
    '''

    case = get_all_cases(name)
    model_name = (os.path.splitext(case['model'])[1])[1:]
    mat_name = "{}.mat".format( model_name )
    return os.path.join("simulations", name, mat_name)

if __name__ == '__main__':
    list_of_cases = get_all_cases()
    #pprint(list_of_cases)
    with open('all_cases.txt', 'w') as f:
        for case in list_of_cases:
            f.write("%s\n" % case)
